// Generated by Selenium IDE
package cs636.music.presentation;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;

import cs636.music.dao.DbDAO;
import cs636.music.dao.InvoiceDAO;
import cs636.music.dao.LineItemDAO;
import cs636.music.dao.ProductDAO;
import cs636.music.dao.UserDAO;
import cs636.music.domain.Invoice;

import org.openqa.selenium.JavascriptExecutor;
import java.util.List;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Set;
@RunWith(SpringRunner.class)
//To be minimalistic, configure only the needed beans
@ContextConfiguration(classes= {DbDAO.class, InvoiceDAO.class, LineItemDAO.class, 
		UserDAO.class, ProductDAO.class})
//Use application-test.properties in src/main/resources instead of application.properties
@ActiveProfiles("test")

public class Buy {
	private WebDriver driver;
//	private Map<String, Object> vars;
	JavascriptExecutor js;
	@Autowired
	private InvoiceDAO invoiceDao;
	@Autowired
	private DbDAO dbDAO;


	@Before
	public void setUp() throws SQLException {
		driver = new FirefoxDriver();
		js = (JavascriptExecutor) driver;
//		vars = new HashMap<String, Object>();
		Connection connection = Listen.getConnected();
		dbDAO.clearTable(connection, "invoice");
		// apparently, deletes all cookies here
		Set<Invoice> is = invoiceDao.findAllInvoices(connection);	
		connection.close();		
		assertEquals(0, is.size());
	}

	@After
	public void tearDown() {
		driver.quit();
	}

	@Test
	public void buy() throws SQLException {
		// Test name: buy
		browsecat();
		// 5 | click | linkText=86 (the band) - True Life Songs and Pictures | |
		driver.findElement(By.partialLinkText("86")).click();
		// 6 | click | linkText=Add to Cart | |
		driver.findElement(By.partialLinkText("dd")).click();
		// 7 | click | linkText=Checkout | |
		// driver.findElement(By.partialLinkText("heckout")).click();
		clickLinkOrButton("heckout");
		register();
		try {
			Thread.sleep(1000);
		} catch (Exception e) {
		}
		// Run another txn (auto-committed) to find out if dl recorded
		Connection connection = Listen.getConnected();
		Set<Invoice> is = invoiceDao.findAllInvoices(connection);	
		connection.close();		
		assertEquals(1, is.size());

	}

	public void browsecat() {
		// Test name: browsecat
		// Step # | name | target | value | comment
		// 1 | open | http://localhost:9993/welcome.html | |
		driver.get("http://localhost:9990/welcome.html");
		// 2 | setWindowSize | 1427x963 | |
		driver.manage().window().setSize(new Dimension(1427, 963));
		// 3 | click | linkText=User Service | |
		driver.findElement(By.partialLinkText("ser")).click();
		// 4 | click | linkText=Browse Catalog | |
		driver.findElement(By.partialLinkText("rowse")).click();
	}

	public void register() {
		List<WebElement> elts = driver.findElements(By.tagName("input"));
		int i = 0;
		System.out.println("found " + elts.size() + " inputs");
		for (WebElement elt : elts) {
			if (i < elts.size() - 1)
				elt.sendKeys("a@o"); // any one of these could be the email
			else { // last one
				System.out.println("doing submit");
				elt.click(); // submit doesn't work here with Firefox
			}
			i++;
		}

	}

	// find link or button value ending in val
	public void clickLinkOrButton(String val) {
		WebElement elt;
		try {
			elt = driver.findElement(By.partialLinkText(val));
		} catch (Exception e) {
			elt = driver.findElement(By.cssSelector("input[value$=" + val));
		}
		elt.click();
	}
}
