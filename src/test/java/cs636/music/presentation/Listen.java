// Generated by Selenium IDE
// see Chrome extension "Selenium IDE" with icon with Se on black background
// create test, export it to Java, edit it to be robust.
package cs636.music.presentation;

// Uses current Firefox, and Gecko driver installed 
// at c:\geckodriver-v0.24.0-win64, on path
// This assumes certain DB in use (cs636/cs636 oracle)
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import cs636.music.domain.Download;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;

import cs636.music.dao.DbDAO;
import cs636.music.dao.DownloadDAO;
import cs636.music.dao.ProductDAO;

import org.openqa.selenium.JavascriptExecutor;
import java.util.List;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Set;
@RunWith(SpringRunner.class)
//To be minimalistic, configure only the needed beans
//-- here DownloadDAO needs ProductDAO
@ContextConfiguration(classes= {DbDAO.class, DownloadDAO.class, ProductDAO.class})
//Use application-test.properties in src/main/resources instead of application.properties
@ActiveProfiles("test")
public class Listen {
	private WebDriver driver;
//	private Map<String, Object> vars;
	JavascriptExecutor js;
	@Autowired
	private DownloadDAO downloaddao;
	@Autowired
	private DbDAO dbDAO;

	@Before
	public void setUp() throws SQLException {
		driver = new FirefoxDriver();
		js = (JavascriptExecutor) driver;
//		vars = new HashMap<String, Object>();
		Connection connection = getConnected();
		dbDAO.clearTable(connection, "download");
		// apparently, deletes all cookies here
		Set<Download> dls = downloaddao.findAllDownloads(connection);	
		connection.close();		
		assertEquals(0, dls.size());
	}

	@After
	public void tearDown() {
		driver.quit();
	}

	@Test
	public void listen1() throws SQLException {
		listen(true);
	}
	public void listen(boolean doPlay) throws SQLException {
		// Test name: listen
		// driver.manage().deleteAllCookies();  // reset session vars (not needed)
		browsecat();
		// 5 | click | linkText=86 (the band) - True Life Songs and Pictures | |
		driver.findElement(By.partialLinkText("rue")).click();
		// 9 | click | linkText=Listen to samples | |
		clickLinkOrButton("isten");
		// driver.findElement(By.partialLinkText("isten")).click();
		register();
		try {
			Thread.sleep(1000);
		} catch (Exception e) {
		}
		if (doPlay) {
		play();  // should cause transaction here, committed
		try {
			Thread.sleep(5000);
		} catch (Exception e) {
		}
		// Run another txn (auto-committed) to find out if dl recorded
		Connection connection = getConnected();
		Set<Download> dls = downloaddao.findAllDownloads(connection);	
		connection.close();		
		assertEquals(1, dls.size());
		}
	}
	
	// test that registration not needed on second listen attempt
	// need to repeat listen steps to maintain session variables
	// since setup apparently deletes all cookies and clears browser caches
	@Test
	public void listen2() throws SQLException {
		listen(false);  // repeat above sequence without playing, then go on
		browsecat();
		// choose a different band--tracks get cached in browser!
		driver.findElement(By.partialLinkText("ood")).click();
		// 9 | click | linkText=Listen to samples | |
		driver.findElement(By.partialLinkText("isten")).click();
		//register(); shouldn't be necessary
		// play();	just get here
		try {
			Thread.sleep(4000);
		} catch (Exception e) {
		}	
		//driver.findElement(By.tagName("audio"));  //might not use HTML5
		Connection connection = getConnected();
		Set<Download> dls = downloaddao.findAllDownloads(connection);	
		connection.close();		
		assertEquals(0, dls.size());

	}

	public void browsecat() {
		// Test name: browsecat
		// Step # | name | target | value | comment
		// 1 | open | http://localhost:9993/welcome.html | |
		driver.get("http://localhost:9990/welcome.html");
		// 2 | setWindowSize | 1427x963 | |
		driver.manage().window().setSize(new Dimension(1427, 963));
		// 3 | click | linkText=User Service | |
		driver.findElement(By.partialLinkText("ser")).click();
		// 4 | click | linkText=Browse Catalog | |
		driver.findElement(By.partialLinkText("rowse")).click();
	}

	public void register() {
		List<WebElement> elts = driver.findElements(By.tagName("input"));
		int i = 0;
		System.out.println("found "+elts.size()+" inputs");
		for (WebElement elt: elts) {
			if (i < elts.size()-1 )
				elt.sendKeys("a@o");  // any one of these could be the email
			else {  // last one
				System.out.println("doing submit");		
				elt.click();  // submit doesn't work here with Firefox
			}
			i++;
		}

	}
	// find link or button value ending in val
	public void clickLinkOrButton(String val) {
		WebElement elt;
		try {
			elt = driver.findElement(By.partialLinkText(val));
		} catch (Exception e) {
			elt = driver.findElement(By.cssSelector("input[value$=" + val));
		}
		elt.click();
	}
	// from stackoverflow.com/questions/53515607
	public void play() {
		JavascriptExecutor jse = (JavascriptExecutor)driver;
		jse.executeScript("document.querySelector('audio').play();");
	}
	// This assumes certain DB in use
	static Connection getConnected() throws SQLException {
//		String connStr = "jdbc:oracle:thin:@" + "localhost" + ":1521:dbs3";
		String connStr = "jdbc:mysql://" + "localhost:3333/eoneil1db";
		//return DriverManager.getConnection(connStr, "cs636test", "cs636test");
		return DriverManager.getConnection(connStr, "eoneil1", "eoneil1");
	}

}
